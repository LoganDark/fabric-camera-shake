package net.logandark.camerashake.api.event;

import net.logandark.camerashake.api.provider.CameraShakeProvider;

/**
 * As opposed to {@link CameraShakeProvider}s, which are always present, a
 * {@link CameraShakeEvent} is directly generated by an action. Things like
 * explosions and such. {@link CameraShakeEvent}s are generally short-lived and
 * don't depend on outside influence. Use {@link CameraShakeProvider} for things
 * like camera shake based on player proximity.
 */
public interface CameraShakeEvent {
	/**
	 * @param t The time in seconds since the event was created. This may or may
	 *          not be absolute seconds, it may be calculated based on ticks.
	 *          Time may be slowed or distorted. Your event should be completely
	 *          deterministic based on this parameter and variables passed
	 *          during construction.
	 * @return {@code false} if the event is finished and can be removed. This
	 * method is always called before {@link #getCameraShakeMagnitude} to make
	 * sure that the event is still valid.
	 */
	boolean isValid(double t);

	/**
	 * Every frame camera shake events and providers are queried for their
	 * magnitude. All magnitudes are added up and that is how intense the shake
	 * will be that frame.
	 *
	 * @param t The time in seconds since the event was created. This may or may
	 *          not be absolute seconds, it may be calculated based on ticks.
	 *          Time may be slowed or distorted. Your event should be completely
	 *          deterministic based on this parameter and variables passed
	 *          during construction.
	 * @return The magnitude in blocks of the camera shake being generated by
	 * this event
	 */
	double getCameraShakeMagnitude(double t);
}
